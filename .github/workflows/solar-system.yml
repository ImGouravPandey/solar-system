name: Solar System Workflow

on:
  push:
    branches:
      - main
      - 'feature/*'
  workflow_dispatch:

env:
  MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}

jobs:
  unit-testing:
    name: Unit Testing
    strategy:
      matrix: 
        nodejs_version: [18, 19]
        operating_system: [ubuntu-latest]
    runs-on: ${{ matrix.operating_system }}    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js - ${{ matrix.nodejs_version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.nodejs_version }}

      - name: Cache NPM dependencies
        uses: actions/cache@v3
        with: 
          path: node_modules
          key: ${{ runner.os}}-node-modules-${{ hashFiles('package-lock.json') }}

      - name: Install Dependencies
        run: npm install

      - name: Run Tests
        id: nodejs-unit-testing-step
        run: npm test

      - name: Archive Test Result
        if: always()
        uses: actions/upload-artifact@v3
        with: 
          name: mocha-test-result
          path: test-results.xml
          # Explanation:
          # The condition 'if: steps.nodejs-unit-testing-step.outcome == 'failure' || steps.nodejs-unit-testing-step.outcome == 'success' ensures that the step runs regardless of the test outcome.
          # If this condition causes an error, it's likely due to the default status check of success applied by GitHub Actions unless overridden.
          # The default status check behavior can be modified using various status check functions documented in the GitHub Actions documentation.
          # Here, 'failure()' function is employed to trigger the step even if the unit test fails.
          # By using 'always()' condition, the step is guaranteed to execute irrespective of the preceding steps' success or failure.
          # This setup ensures that the archiving of test results remains consistent and thorough, aiding in troubleshooting and analysis.

          # Explanation:
          # The 'Archive Test Result' step ensures that test results are saved
          # If a unit test fails, this step will still run due to the 'always()' function,
          # which guarantees its execution regardless of the previous step's outcome

  code-coverage: 
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
          
      - name: Setup Node.js Version 18
        uses: actions/setup-node@v3
        with:
          node-version: 18
          
      - name: Cache NPM dependencies
        uses: actions/cache@v3
        with: 
          path: node_modules
          key: ${{ runner.os}}-node-modules-${{ hashFiles('package-lock.json') }}

          ### Cache NPM Dependencies

# This step caches NPM dependencies to improve workflow efficiency by avoiding unnecessary installations of dependencies that have not changed.

# - **Name:** Cache NPM dependencies
# - **Uses:** [actions/cache@v3](https://github.com/actions/cache)
# - **Purpose:** This action caches the NPM dependencies to speed up subsequent workflow runs by reusing previously installed dependencies.
# - **Configuration:**
#   - **`path`:** Specifies the directory containing NPM dependencies to be cached. In this case, it is set to `node_modules`.
  # - **`key`:** Sets a unique key for the cache entry. The key is composed of the operating system of the runner (`[ # { runner.os } ]`) concatenated with the hash of the `package-lock.json` file. This ensures that the cache is specific to the operating system and the exact versions of dependencies specified in `package-lock.json`.
# - **Why Cache NPM Dependencies?** Caching NPM dependencies reduces the time required for subsequent workflow runs, especially in scenarios where dependencies remain unchanged. By caching dependencies, the workflow can skip the installation step if the dependencies are already present in the cache, thus improving overall workflow execution time.
# - **Note:** It's important to update the `package-lock.json` file whenever there are changes in dependencies to ensure accurate caching.

          
      - name: Install Dependencies
        run: npm install
          
      - name: Check Code Coverage
        continue-on-error: true # don't fail the action if there is no code to cover
        run: npm run coverage
          
      - name: Archive Code Coverage Result
        uses: actions/upload-artifact@v3
        with:
          name: code coverage result
          path: coverage
          retention-days: 5
